/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |				
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10                                  	
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     foamRun;

solver          incompressibleFluid;

startFrom       startTime;
//startFrom       latestTime;

//note commented keywords and values are to switch to unsteady solver.
startTime       0;

stopAt          endTime;

endTime         0;//250;//2000;			//250;

deltaT          0.001;//1;			//0.001;

writeControl    runTime;

writeInterval   1;//50;			//1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  12;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;


maxCo           2;
maxDeltaT       0.1;



// ************************************************************************* //

functions
{

//Source code, tempaltes, and more options:
//OpenFOAM-11/src/OpenFOAM/db/functionObjects/
//OpenFOAM-11/src/functionObjects/
//OpenFOAM-11/etc/caseDicts/postProcessing/


///////////////////////////////////////////////////////////////////////////

    inMassFlow
    {
        type            surfaceFieldValue;
        libs		("libfieldFunctionObjects.so");
        enabled         true;

//        writeControl     outputTime;
	writeControl   timeStep;
	writeInterval  1;

        log             true;

        writeFields     false;

        select         patch;	
        patch	      inlet;	

	operation       sum;
        fields
        (
            phi
        );
    }

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

    outMassFlow
    {
        type            surfaceFieldValue;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled         true;

//      writeControl     outputTime;

	writeControl   timeStep;
	writeInterval  1;

        log             yes;

        writeFields     false;

        //writeFields     true;
        //surfaceFormat   raw;

        select          patch;
        patch      	outlet;

	operation       sum;
        fields          ( phi );
    }

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

    fieldAverage
    {
        type            fieldAverage;
        libs ("libfieldFunctionObjects.so");
        enabled         true;
        writeControl   outputTime;

	//writeControl   timeStep;
	//writeInterval  100;

	restartOnRestart    false;

        //timeStart       20;
        //timeEnd         2000;

	base        iteration;	//iteration-time

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                
            }

            p
            {
                mean        on;
                prime2Mean  on;
            }
        );
    }

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/*
forces_object
{
	type forces;
	libs ("libforces.so");

	//writeControl outputTime;
	writeControl   timeStep;
	writeInterval  1;

	enabled 	true;
        log           	true;

	//// Patches to sample
	//patches ("body1" "body2" "body3");
	patches ("cylinder");

	//// Name of fields
	p p;
	U U;

	//// Density
    	rho           rhoInf;     // Indicates incompressible
        rhoInf        1;          // Redundant for incompressible
//For incompressible cases, set rho to rhoInf and provide
//a rhoInf value corresponding to the free-stream constant density.

	//// Centre of rotation
	CofR 		(0 0 0);
        pitchAxis     	(0 0 1);

}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

forceCoeffs_object
{
	// rhoInf - reference density
	// CofR - Centre of rotation
	// dragDir - Direction of drag coefficient
	// liftDir - Direction of lift coefficient
	// pitchAxis - Pitching moment axis
	// magUinf - free stream velocity magnitude
	// lRef - reference length
	// Aref - reference area

	type forceCoeffs;
	libs ("libforces.so");
	//patches ("body1" "body2" "body3");
	patches ("cylinder");

	p p;
	U U;

	rho rhoInf;
	rhoInf 1.0;
//For incompressible cases, set rho to rhoInf and provide
//a rhoInf value corresponding to the free-stream constant density.

	enabled 	true;
        log           	true;

	CofR (0.0 0 0);

	liftDir (0 1 0);
	dragDir (1 0 0);
	pitchAxis (0 0 1);

	magUInf 1.0;
	lRef 1.0;         // reference lenght
	Aref 2.0;         // reference area 1 for 2d

        writeControl   timeStep;
        writeInterval  1;
}
*/
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

minmaxdomain_scalar
{
    type            volFieldValue;
    libs            ("libfieldFunctionObjects.so");

    enabled         true;   //true or false
    log             false;   //write to screen
    
    //writeControl    writeTime;
    writeControl    timeStep;
    writeInterval   1;

    writeFields     false;  //write solution to field value - Not needed when only reporting value to screen

    writeLocation   true;   //write location in the output file

    //mode component;

    select      all;

    operation       none;

    fields
    (
        p //k nut omega
    );
}

minmaxdomain_vector
{
    type            volFieldValue;
    libs            ("libfieldFunctionObjects.so");

    enabled         true;   //true or false
    log             false;   //write to screen
    
    //writeControl    writeTime;
    writeControl    timeStep;
    writeInterval   1;

    writeFields     false;  //write solution to field value - Not needed when only reporting value to screen

    writeLocation   true;   //write location in the output file

    //mode component;

    select      all;

    operation       none;

    fields
    (
        U
    );
}

mindomain_scalar
{
    $minmaxdomain_scalar
    log             true;   //write to screen
    operation       min;
}

mindomain_vector
{
    $minmaxdomain_vector
    log             true;   //write to screen
    operation       minMag;
}

maxdomain_scalar
{
    $minmaxdomain_scalar
    log             true;   //write to screen
    operation       max;
}

maxdomain_vector
{
    $minmaxdomain_vector
    log             true;   //write to screen
    operation       maxMag;
}

///////////////////////////////////////////////////////////////////////////
//Print y+ stats every iteration without saving the field

yplus_stats
{

    type            yPlus;
    libs            ("libfieldFunctionObjects.so");

    enabled true;

    //writeControl outputTime;
    writeControl timeStep;
    writeInterval 1;

//Leave object empty to not save the field
//This setup will only print the yplus values every timestep and will not save the field
    objects ();
    log true;

}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
//saves y+ field at the given interval

yplus_field
{

    type            yPlus;
    libs            ("libfieldFunctionObjects.so");

    enabled true;

    writeControl outputTime;
    //writeControl timeStep;
    //writeInterval 1;

//Add yPlus to save the field
//You can also ignore this entry and by default th field will be saved
    //objects ( yPlus );
    //log true;	

}

};
